buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.ajoberstar.grgit:grgit-gradle:3.0.0"
    }
}

apply plugin: org.ajoberstar.grgit.gradle.GrgitPlugin

ext.updateVersionData = {
    ext.versionComponents = version.split('-')
    ext.gameVersion = versionComponents[0]
    ext.releaseVersion = versionComponents[1]
}

updateVersionData()

class VersionShiftTask extends DefaultTask {
    String incrementPart

    @TaskAction
    void changeVersion() {
        def newReleaseVersionComponents = project.releaseVersion.split('\\.')
        def newGameVersion = project.gameVersion

        switch (incrementPart) {
            case 'game':
                newGameVersion = project.newGameVersion
                break

            case 'major':
                newReleaseVersionComponents[0] = newReleaseVersionComponents[0].toInteger() + 1
                break

            case 'minor':
                newReleaseVersionComponents[1] = newReleaseVersionComponents[1].toInteger() + 1
                break

            case 'patch':
                newReleaseVersionComponents[2] = newReleaseVersionComponents[2].toInteger() + 1
                break
        }

        def newVersionComponents = [newGameVersion, newReleaseVersionComponents.join('.')]
        newVersionComponents.addAll project.versionComponents.drop(2)
        project.version = newVersionComponents.join('-')

        def propFile = project.file('gradle.properties')
        def lines = propFile.withReader { r ->
            r.readLines().collect {
                if (it.startsWith('version=')) {
                    "version=$project.version"
                } else {
                    it
                }
            }
        }

        propFile.withWriter { w ->
            lines.each {
                w.writeLine(it)
            }
        }

        project.updateVersionData()
    }
}

tasks.register('nextPatch', VersionShiftTask) {
    group = 'versioning'
    description = 'Increments version of the project by 1 patch'
    incrementPart = 'patch'
}

tasks.register('nextMinor', VersionShiftTask) {
    group = 'versioning'
    description = 'Increments version of the project by 1 minor version'
    incrementPart = 'minor'
}

tasks.register('nextMajor', VersionShiftTask) {
    group = 'versioning'
    description = 'Increments version of the project by 1 major version'
    incrementPart = 'major'
}

tasks.register('gameVersion', VersionShiftTask) {
    group = 'versioning'
    description = 'Changes minecraft version of the project to one specified by newGameVersion'

    incrementPart = 'game'
}

tasks.register('addVersionTag') {
    group = 'versioning'
    description = 'Tags current commit for release with the project version'
    doLast {
        def git = grgit.open()

        if (git.tag.list().any { it.name == "v$project.version" }) {
            throw new IllegalArgumentException("Tag 'v$project.version' already exists")
        }

        git.tag.add(name: "v$project.version", message: "Tag release $project.version")
    }
}